# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  - main

pool:
  vmImage: "windows-latest"

variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: 10.14.2
    displayName: "Install Node.js"
  - task: Cache@2
    inputs:
      key: npm | “$(Agent.OS)” | $(Build.SourcesDirectory)/handlelisteApp/client-app/package-lock.json
      path: ./handlelisteApp/client-app/node_modules
      cacheHitVar: 'CacheRestored'
    displayName: "Cache node_modules"

  - task: Cache@2
    inputs:
      key: cypress | $(Build.SourcesDirectory)/handlelisteApp/client-app/package-lock.json
      path: $(LOCALAPPDATA)/Cypress
      restoreKeys: cypress | $(Build.SourcesDirectory)/handlelisteApp/client-app/package-lock.json
      cacheHitVar: 'CypressRestored'
    displayName: "Cache cypress binary"

  - script: |
      cd handlelisteApp/client-app
      npm install
    displayName: "Run npm install"
    condition: or(eq(variables.CacheRestored, 'false'), eq(variables.CypressRestored, 'false'))
  
  - script: |
      cd handlelisteApp/client-app
      npm run test:ci
    displayName: "Run npm test"

  - script: |
      cd handlelisteApp/client-app
      npm run cy:verify
    displayName: "Cypress Verify"

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit" # Options: JUnit, NUnit, VSTest, xUnit
      testResultsFiles: "**/junit.xml"
    displayName: "Publish test results"

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: "Cobertura"
      summaryFileLocation: "**/cobertura-coverage.xml"
    displayName: "Publish Code Coverage"

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: "$(solution)"

  - task: VSBuild@1
    inputs:
      solution: "$(solution)"
      platform: "$(buildPlatform)"
      configuration: "$(buildConfiguration)"

  - task: DotNetCoreCLI@2
    displayName: "Install dotnet-reportgenerator-globaltool"
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . dotnet-reportgenerator-globaltool

  - task: DotNetCoreCLI@2
    displayName: "Test $(buildConfiguration)"
    inputs:
      command: test
      projects: $(solution)
      arguments: --configuration $(BuildConfiguration) --collect "XPlat Code Coverage"

  - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml;$(Build.SourcesDirectory)/**/cobertura-coverage.xml -targetDir:$(Build.SourcesDirectory)/TestResults/Coverage/Reports -reporttypes:Cobertura
    displayName: "Create Code Coverage Reports"

  - script: |
      cd handlelisteApp/client-app
      npm run cy:testh
    displayName: "Cypress tests"
    env:
      shop_USERNAME: $(shop_USERNAME)
      shop_PASSWORD: $(shop_PASSWORD)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'handlelisteApp\client-app\cypress\screenshots'
      artifactName: cypress-screenshots
    condition: failed()
    continueOnError: true
    displayName: 'Publish screenshots when there were issues'

  - task: PublishCodeCoverageResults@1
    displayName: "Publish Code Coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/TestResults/Coverage/Reports/Cobertura.xml
      failIfCoverageEmpty: false

  - task: DotNetCoreCLI@2
    inputs:
      command: "publish"
      publishWebProjects: false
      projects: "handlelisteApp/handlelisteApp.csproj"
      arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
      zipAfterPublish: true

  - task: PublishBuildArtifacts@1
    displayName: "Upload Artifacts"
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
